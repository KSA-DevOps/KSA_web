---
import Button from "@ui/Button.astro";
import SearchButton from "@ui/SearchButton.tsx";
import WeatherWidget from "../WeatherWidget.svelte";
import {
  getTranslation,
  getCurrentLanguage,
  addLanguageToPath,
} from "@utils/i18n";

const currentPath = Astro.url.pathname;
const currentLang = getCurrentLanguage(Astro.url);

// KSA 메뉴 구조 (드롭다운 포함)
const ksaMenuItems = [
  {
    text: getTranslation("nav.about", currentLang),
    href: addLanguageToPath("/about", currentLang),
    dropdown: [
      {
        header: "The Association",
        items: [
          {
            text: getTranslation("nav.about.constitution", currentLang),
            href: addLanguageToPath("/aboutus/constitution", currentLang),
          },
        ],
      },
      {
        header: "Personnels",
        items: [
          {
            text: getTranslation("nav.about.presidents", currentLang),
            href: addLanguageToPath("/aboutus/presidents", currentLang),
          },
          {
            text: getTranslation("nav.about.executives", currentLang),
            href: addLanguageToPath("/aboutus/executives", currentLang),
          },
          {
            text: getTranslation("nav.about.subcommittee", currentLang),
            href: addLanguageToPath("/aboutus/subcommittee", currentLang),
          },
        ],
      },
    ],
  },
  {
    text: getTranslation("nav.events", currentLang),
    href: addLanguageToPath("/events", currentLang),
    dropdown: [
      {
        header: "홍콩과기대학생회 행사 / KSA Events",
        items: [
          {
            text: getTranslation("nav.events.annual", currentLang),
            href: addLanguageToPath("/events/annual", currentLang),
          },
          {
            text: getTranslation("nav.events.career", currentLang),
            href: addLanguageToPath("/events/career", currentLang),
          },
          {
            text: getTranslation("nav.events.news", currentLang),
            href: addLanguageToPath("/events/news", currentLang),
          },
        ],
      },
    ],
  },
  {
    text: getTranslation("nav.board", currentLang),
    href: addLanguageToPath("/board", currentLang),
    dropdown: [
      {
        header: "게시판",
        items: [
          // TODO: {
          //   text: getTranslation("nav.board.career", currentLang),
          //   href: addLanguageToPath("/board/career", currentLang),
          // },
          {
            text: getTranslation("nav.board.suggestions", currentLang),
            href: addLanguageToPath("/board/suggestions", currentLang),
          },
        ],
      },
    ],
  },
];

const simpleMenuItems: Array<{ text: string; href: string }> = [
  {
    text: getTranslation("nav.clubs", currentLang),
    href: addLanguageToPath("/clubs", currentLang),
  },
];
---

<header
  class="fixed top-5 right-5 left-5 z-50 mx-auto flex w-auto max-w-sm rounded-2xl border-b border-slate-100 bg-white bg-gradient-to-t from-teal-100 via-transparent to-white p-4 shadow-xs sm:max-w-xl md:max-w-4xl md:justify-center lg:max-w-5xl xl:max-w-6xl xl:shadow-none xl:ring-teal-950/5 2xl:max-w-[81rem] desktop-hide-on-scroll"
  style="min-height: 80px; height: 80px;"
>
  <nav
    class="relative mx-auto w-full px-4 py-2 sm:px-6 lg:px-8 xl:flex xl:max-w-7xl xl:items-center xl:justify-between xl:gap-3 2xl:max-w-[85rem]"
  >
    <!-- Logo and Mobile Menu Section -->
    <div class="flex items-center justify-between gap-x-1 xl:justify-start">
      <a
        class="dm-sans flex-none text-2xl font-light text-slate-400 focus:opacity-80 focus:outline-hidden"
        href={addLanguageToPath("/", currentLang)}
        aria-label="HKUST KSA Logo"
        translate="no"
        ><span class="font-semibold text-teal-700">HKUST</span> KSA</a
      >

      <!-- Mobile Menu Button -->
      <button
        type="button"
        class="hs-collapse-toggle relative flex size-9 items-center justify-center rounded-lg border border-slate-200 text-[12px] font-medium text-slate-800 hover:bg-slate-100 focus:bg-slate-100 focus:outline-hidden xl:hidden"
        id="hs-header-base-collapse"
        aria-expanded="false"
        aria-controls="hs-header-base"
        aria-label="Toggle navigation"
        data-hs-collapse="#hs-header-base"
      >
        <svg
          class="hs-collapse-open:hidden size-4"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          ><line x1="3" x2="21" y1="6" y2="6"></line><line
            x1="3"
            x2="21"
            y1="12"
            y2="12"></line><line x1="3" x2="21" y1="18" y2="18"></line></svg
        >
        <svg
          class="hs-collapse-open:block hidden size-4 shrink-0"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          ><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
        >
        <span class="sr-only">Toggle navigation</span>
      </button>
    </div>

    <!-- Desktop Menu Section -->
    <div
      id="hs-header-base"
      class="hs-collapse hidden grow basis-full rounded-md bg-white/80 transition-all duration-300 xl:block xl:rounded-xl xl:bg-transparent"
      aria-labelledby="hs-header-base-collapse"
    >
      <div class="flex w-full items-center justify-between gap-4">
        <!-- Center Menu Items -->
        <div class="flex flex-1 justify-evenly">
          <div
            class="flex flex-col gap-0.5 py-2 xl:flex-row xl:items-center xl:gap-4 xl:py-0"
          >
            <div class="grow">
              <div
                class="flex flex-col gap-0.5 xl:flex-row xl:items-center xl:justify-center xl:gap-6"
              >
                {
                  ksaMenuItems.map((item) => (
                    <div class="hs-dropdown relative [--auto-close:inside] [--placement:bottom-left]">
                      <button
                        id={`hs-dropdown-hover-event-${item.text.replace(/\s/g, "-")}`}
                        type="button"
                        class={`hs-dropdown-toggle flex items-center rounded-lg p-2 font-medium text-slate-800 transition-opacity duration-200 hover:bg-slate-100 hover:opacity-60 focus:bg-slate-100 focus:outline-hidden ${
                          currentPath === item.href
                            ? "underline underline-offset-4"
                            : ""
                        }`}
                        aria-expanded="false"
                        aria-haspopup="true"
                      >
                        {item.text}
                        <svg
                          class="hs-dropdown-open:rotate-180 ml-1 h-4 w-4 transition-transform"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M19 9l-7 7-7-7"
                          />
                        </svg>
                      </button>

                      <div
                        class="hs-dropdown-menu hs-dropdown-open:opacity-100 duration static top-full left-0 z-50 mt-0 hidden w-auto min-w-48 rounded-md bg-white p-0 opacity-0 shadow-none transition-[opacity,margin] lg:absolute xl:mt-2 xl:w-64 xl:rounded-lg xl:p-2 xl:shadow-md"
                        aria-labelledby={`hs-dropdown-hover-event-${item.text.replace(/\s/g, "-")}`}
                      >
                        {item.dropdown.map((section) => (
                          <div>
                            {section.header && (
                              <div class="px-3 py-2 text-xs font-semibold tracking-wide text-gray-500 uppercase">
                                {section.header}
                              </div>
                            )}
                            {section.items.map((subItem) => (
                              <a
                                href={subItem.href}
                                class="flex items-center gap-x-3.5 rounded-lg px-4 py-2 text-sm text-gray-800 transition-all duration-200 ease-in-out hover:scale-101 hover:bg-gray-100 hover:bg-teal-50 hover:text-teal-700 hover:shadow-sm focus:bg-gray-100"
                              >
                                {subItem.text}
                              </a>
                            ))}
                            {section.header && section.items.length > 0 && (
                              <div class="my-1 border-t border-gray-100" />
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  ))
                }

                {
                  simpleMenuItems.map((item) => (
                    <a
                      href={item.href}
                      class={`flex items-center rounded-lg p-2 font-medium text-slate-800 transition-opacity duration-200 hover:bg-slate-100 hover:opacity-60 focus:bg-slate-100 focus:outline-hidden ${
                        currentPath === item.href
                          ? "underline underline-offset-4"
                          : ""
                      }`}
                      aria-current={
                        currentPath === item.href ? "page" : undefined
                      }
                    >
                      {item.text}
                    </a>
                  ))
                }

                <!-- Mobile-only buttons (hidden on desktop) -->
                <div class="border-t border-gray-200 pt-4 xl:hidden">
                  <!-- Search Button for Mobile -->
                  <div class="mb-2">
                    <SearchButton client:load lang={currentLang} isMobile={true} />
                  </div>

                  <!-- Contact/Report Button for Mobile -->
                  <a
                    href={addLanguageToPath("/contact", currentLang)}
                    class="flex items-center rounded-lg bg-teal-600 p-3 font-medium text-white transition-opacity duration-200 hover:bg-teal-700 focus:bg-teal-700 focus:outline-hidden"
                  >
                    <span class="mr-2">📝</span>
                    {getTranslation("nav.report", currentLang)}
                  </a>

                  <!-- Weather Button for Mobile -->
                  <a
                    href={addLanguageToPath("/weather", currentLang)}
                    class="mt-2 flex items-center gap-2 rounded-lg border border-blue-200 bg-blue-50 p-3 font-medium text-blue-800 transition-colors hover:bg-blue-100"
                  >
                    <WeatherWidget client:only="svelte" lang={currentLang} />
                  </a>

                  <!-- Language Toggle for Mobile -->
                  <div class="mt-3">
                    <div class="mb-2 text-sm font-medium text-gray-700">
                      {currentLang === "ko" ? "언어 선택" : "Language"}
                    </div>
                    <div class="flex gap-2">
                      <a
                        href={addLanguageToPath(currentPath, "ko")}
                        class={`flex-1 px-4 py-2 text-center text-sm rounded-lg font-medium transition-colors ${
                          currentLang === "ko"
                            ? "bg-teal-600 text-white"
                            : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                        }`}
                      >
                        한국어
                      </a>
                      <a
                        href={addLanguageToPath(currentPath, "en")}
                        class={`flex-1 px-4 py-2 text-center text-sm rounded-lg font-medium transition-colors ${
                          currentLang === "en"
                            ? "bg-teal-600 text-white"
                            : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                        }`}
                      >
                        English
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Right Side Buttons -->
          <div class="hidden flex-shrink-0 items-center gap-3 xl:flex">
            <!-- Search Button -->
            <SearchButton client:load lang={currentLang} />

            <Button
              href={addLanguageToPath("/contact", currentLang)}
              variant="primary"
              className="px-4 py-2 text-sm"
            >
              {getTranslation("nav.report", currentLang)}
            </Button>
            <div class="flex gap-2">
              <a
                href={addLanguageToPath(currentPath, "ko")}
                class={`px-3 py-1 text-xs rounded ${currentLang === "ko" ? "bg-teal-600 text-white" : "bg-gray-200 text-gray-700"}`}
              >
                KO
              </a>
              <a
                href={addLanguageToPath(currentPath, "en")}
                class={`px-3 py-1 text-xs rounded ${currentLang === "en" ? "bg-teal-600 text-white" : "bg-gray-200 text-gray-700"}`}
              >
                EN
              </a>
            </div>
            <!-- Weather Display -->
            <a
              href={addLanguageToPath("/weather", currentLang)}
              class="flex items-center gap-1 rounded-lg border border-blue-200 bg-blue-50 px-3 py-1 text-sm font-medium text-blue-800 transition-colors hover:bg-blue-100"
            >
              <WeatherWidget client:only="svelte" lang={currentLang} />
            </a>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <script>
    document.addEventListener("astro:page-load", async () => {
      const preline = await import("preline/preline.js");
      preline.HSStaticMethods.autoInit();
      
      // Desktop-only navbar hide-on-scroll behavior
      const header = document.querySelector('header');
      if (!header) return;
      
      let lastScrollY = window.scrollY;
      let isHidden = false;
      
      const handleScroll = () => {
        const currentScrollY = window.scrollY;
        const isDesktop = window.innerWidth >= 1280; // xl breakpoint
        
        if (!isDesktop) {
          // Reset on mobile/tablet
          header.classList.remove('is-hidden');
          isHidden = false;
          lastScrollY = currentScrollY;
          return;
        }
        
        // Desktop only logic
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          // Scrolling down and past threshold - hide navbar
          if (!isHidden) {
            header.classList.add('is-hidden');
            isHidden = true;
          }
        } else if (currentScrollY < lastScrollY) {
          // Scrolling up - show navbar
          if (isHidden) {
            header.classList.remove('is-hidden');
            isHidden = false;
          }
        }
        
        lastScrollY = currentScrollY;
      };
      
      // Throttle scroll events for better performance
      let ticking = false;
      const throttledHandleScroll = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      };
      
      window.addEventListener('scroll', throttledHandleScroll, { passive: true });
      
      // Handle resize to reset on mobile
      window.addEventListener('resize', () => {
        if (window.innerWidth < 1280) {
          header.classList.remove('is-hidden');
          isHidden = false;
        }
      });
    });
  </script>
</header>
