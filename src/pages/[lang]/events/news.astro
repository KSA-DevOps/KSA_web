---
import BaseLayout from "@layout/BaseLayout.astro";
import { getCollection } from "astro:content";
import { getTranslation } from "@utils/i18n";

// Static paths for news list pages
export function getStaticPaths() {
  return [
    { params: { lang: 'ko' } },
    { params: { lang: 'en' } }
  ];
}

// URL 파라미터에서 언어 추출
const { lang } = Astro.params;
const currentLang: 'ko' | 'en' = (lang === 'ko' || lang === 'en') ? lang : 'ko';

// 모든 소식 가져오기
const allNews = await getCollection('news');
// Sort by date desc (farther future first)
const sortedNews = [...allNews].sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// 모든 라벨 수집
const allLabels = new Set<string>();
allNews.forEach(item => {
  if (item.data.labels && Array.isArray(item.data.labels)) {
    item.data.labels.forEach((label: string) => allLabels.add(label));
  }
});

// 라벨별 이름 매핑
const labelNames: Record<string, string> = {
  // 기존 카테고리들
  career: currentLang === 'ko' ? "커리어" : "Career",
  event: currentLang === 'ko' ? "행사" : "Event",
  mentoring: currentLang === 'ko' ? "멘토링" : "Mentoring",
  introduction: currentLang === 'ko' ? "소개" : "Introduction",
  membership: currentLang === 'ko' ? "회원" : "Membership",
  
  // 추가 라벨들
  announcement: currentLang === 'ko' ? "공지" : "Announcement",
  "welcome-party": currentLang === 'ko' ? "환영회" : "Welcome Party",
  program: currentLang === 'ko' ? "프로그램" : "Program",
  executive: currentLang === 'ko' ? "임원진" : "Executive"
};

// 라벨별 카운트 계산
const labelCounts: Record<string, number> = {};
allLabels.forEach(label => {
  labelCounts[label] = allNews.filter(item => 
    item.data.labels && Array.isArray(item.data.labels) && item.data.labels.includes(label)
  ).length;
});

// 카테고리 배열 생성 (전체 + 라벨별)
const categories = [
  { id: "all", name: currentLang === 'ko' ? "전체" : "All", count: allNews.length },
  ...Array.from(allLabels).map(label => ({
    id: label,
    name: labelNames[label] || label,
    count: labelCounts[label]
  })).sort((a, b) => b.count - a.count) // 카운트 순으로 정렬
];
---

<BaseLayout lang={currentLang}>
  <div class="min-h-screen bg-gradient-to-br from-teal-50 to-blue-50">
    <!-- Hero Section -->
    <section class="relative py-20">
      <div class="container mx-auto px-4 text-center pt-header">
        <h1 class="text-5xl font-bold text-gray-800 mb-6">
          {currentLang === 'ko' ? '소식' : 'News'}
        </h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
          {currentLang === 'ko' 
            ? 'KSA의 최신 소식과 공지사항을 확인하세요'
            : 'Stay updated with the latest KSA news and announcements'
          }
        </p>
      </div>
    </section>

    <!-- Filter Section -->
    <section class="py-8 bg-white">
      <div class="container mx-auto px-4">
        <div class="flex flex-wrap justify-center gap-4">
          {categories.map((category) => (
            <button
              class={`px-6 py-2 rounded-full transition-colors ${
                category.id === 'all' 
                  ? 'bg-teal-500 text-white' 
                  : 'bg-gray-100 text-gray-700 hover:bg-teal-500 hover:text-white'
              }`}
              data-category={category.id}
            >
              {category.name} ({category.count})
            </button>
          ))}
        </div>
      </div>
    </section>

    <!-- News Grid -->
    <section class="py-16 bg-gray-50">
      <div class="container mx-auto px-4">
        <div id="news-grid" class="max-w-6xl mx-auto">
          {sortedNews.map((item) => (
            <a href={`/${currentLang}/events/news/${item.id}`} class="group news-item" data-category={item.data.category} data-labels={item.data.labels ? JSON.stringify(item.data.labels) : '[]'}>
              <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:scale-105">
                <div class="p-6">
                  <div class="flex items-center mb-4">
                    <span class="text-3xl mr-3">{item.data.icon}</span>
                    <div>
                      <h3 class="text-lg font-semibold text-gray-800 mb-1 group-hover:text-teal-600 transition-colors">{item.data.title}</h3>
                      <p class="text-sm text-gray-500">
                        {item.data.date.toLocaleDateString(currentLang === 'ko' ? 'ko-KR' : 'en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric'
                        })}
                      </p>
                    </div>
                  </div>
                  <p class="text-gray-600 mb-4">{item.data.description}</p>
                  <div class="flex justify-between items-center">
                    <span class="inline-block px-3 py-1 rounded-full text-xs font-medium text-white bg-teal-500">
                      {labelNames[item.data.category] || item.data.category}
                    </span>
                    <span class="text-teal-600 group-hover:text-teal-800 text-sm font-medium">
                      {currentLang === 'ko' ? '자세히 보기' : 'Read More'}
                    </span>
                  </div>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  </div>

  <script>
    // 필터링 기능 - 즉시 실행 함수로 변경
    (function() {
      function initializeFiltering() {
        const filterButtons = document.querySelectorAll('button[data-category]');
        const newsItems = document.querySelectorAll('.news-item');
        const newsGrid = document.getElementById('news-grid');

        // 초기 상태 설정
        let currentFilter = 'all';

        // "All" 버튼을 기본 활성 상태로 설정
        const allButton = document.querySelector('button[data-category="all"]');
        if (allButton) {
          allButton.classList.remove('bg-gray-100', 'text-gray-700');
          allButton.classList.add('bg-teal-500', 'text-white');
        }

        filterButtons.forEach((button: Element) => {
          button.addEventListener('click', function(this: Element) {
            const selectedCategory = this.getAttribute('data-category');
            
            // 같은 카테고리를 다시 클릭한 경우 무시
            if (selectedCategory === currentFilter) return;
            
            currentFilter = selectedCategory || 'all';
            
            // 버튼 스타일 업데이트
            filterButtons.forEach((btn: Element) => {
              btn.classList.remove('bg-teal-500', 'text-white');
              btn.classList.add('bg-gray-100', 'text-gray-700');
            });
            this.classList.remove('bg-gray-100', 'text-gray-700');
            this.classList.add('bg-teal-500', 'text-white');

            // 모든 아이템을 먼저 숨기기
            newsItems.forEach((item: Element) => {
              const itemElement = item as HTMLElement;
              itemElement.classList.add('filtering-out');
            });

            // 잠시 후 필터링 적용
            setTimeout(() => {
              newsItems.forEach((item: Element) => {
                const itemElement = item as HTMLElement;
                const itemCategory = itemElement.getAttribute('data-category');
                const itemLabels = itemElement.getAttribute('data-labels');
                let itemLabelsArray: string[] = [];
                
                if (itemLabels) {
                  try {
                    itemLabelsArray = JSON.parse(itemLabels);
                  } catch (e) {
                    itemLabelsArray = [];
                  }
                }
                
                if (selectedCategory === 'all' || itemCategory === selectedCategory || (selectedCategory && itemLabelsArray.includes(selectedCategory))) {
                  itemElement.classList.remove('filtering-out', 'hidden');
                  itemElement.classList.add('filtering-in');
                } else {
                  itemElement.classList.add('hidden');
                }
              });

              // 애니메이션 완료 후 클래스 정리
              setTimeout(() => {
                newsItems.forEach((item: Element) => {
                  const itemElement = item as HTMLElement;
                  itemElement.classList.remove('filtering-in', 'filtering-out');
                });
              }, 600);
            }, 300);
          });
        });
      }

      // 페이지 로드 시 즉시 실행
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeFiltering);
      } else {
        initializeFiltering();
      }

      // Astro 페이지 전환 시에도 실행
      document.addEventListener('astro:page-load', initializeFiltering);
    })();
  </script>

  <style>
    .news-item {
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 1;
      transform: scale(1) translateY(0);
    }
    
    .news-item.filtering-out {
      opacity: 0;
      transform: scale(0.8) translateY(20px);
    }
    
    .news-item.filtering-in {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
    
    .news-item.hidden {
      display: none !important;
    }

    /* Footer 움직임 방지 */
    #news-grid {
      min-height: 400px;
      position: relative;
    }

    /* 부드러운 애니메이션 */
    .news-item {
      will-change: opacity, transform;
    }

    /* 필터 버튼 애니메이션 */
    button[data-category] {
      transition: all 0.2s ease-in-out;
    }

    button[data-category]:active {
      transform: scale(0.95);
    }

    /* Grid 레이아웃 안정화 */
    #news-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }

    @media (min-width: 768px) {
      #news-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (min-width: 1024px) {
      #news-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }
  </style>
</BaseLayout> 