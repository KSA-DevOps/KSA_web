---
import BaseLayout from "@layout/BaseLayout.astro";
import { getTranslation, getCurrentLanguage } from "@utils/i18n";
import { searchIndex, type SearchItem } from "@data/searchIndex";

// Static paths for language routes
export function getStaticPaths() {
  return [{ params: { lang: "ko" } }, { params: { lang: "en" } }];
}

// URL 파라미터에서 언어 추출
const { lang } = Astro.params;
const currentLang: "ko" | "en" = lang === "ko" || lang === "en" ? lang : "ko";

const url = Astro.url;
const searchParams = url.searchParams;
const query = searchParams.get('q') || '';

// Perform search if query exists
function performSearch(searchQuery: string): (SearchItem & { score: number })[] {
  if (!searchQuery.trim()) return [];

  const query = searchQuery.toLowerCase().trim();
  const results: (SearchItem & { score: number })[] = [];

  searchIndex.forEach((item) => {
    let score = 0;
    const title = currentLang === 'ko' ? item.title : item.titleEn;
    const description = currentLang === 'ko' ? item.description : item.descriptionEn;
    const keywords = currentLang === 'ko' ? item.keywords : item.keywordsEn;

    // Title match (highest priority)
    if (title.toLowerCase().includes(query)) {
      score += 100;
    }

    // Description match
    if (description.toLowerCase().includes(query)) {
      score += 50;
    }

    // Keywords match
    keywords.forEach(keyword => {
      if (keyword.toLowerCase().includes(query)) {
        score += 30;
      }
    });

    // Fuzzy matching
    const allText = `${title} ${description} ${keywords.join(' ')}`.toLowerCase();
    if (allText.includes(query)) {
      score += 20;
    }

    if (score > 0) {
      results.push({ ...item, score });
    }
  });

  return results.sort((a, b) => b.score - a.score);
}

const searchResults = query ? performSearch(query) : [];

// Function to highlight search terms
function highlightText(text: string, searchQuery: string): string {
  if (!searchQuery) return text;

  const regex = new RegExp(`(${searchQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
  return text.replace(regex, '<mark class="bg-yellow-200 px-1 rounded">$1</mark>');
}

const getCategoryIcon = (category: string) => {
  switch (category) {
    case 'page': return '📄';
    case 'event': return '📅';
    case 'news': return '📰';
    case 'board': return '📋';
    case 'club': return '👥';
    case 'about': return 'ℹ️';
    default: return '📄';
  }
};

const getCategoryName = (category: string) => {
  const categoryNames = {
    ko: {
      page: '페이지',
      event: '행사',
      news: '소식',
      board: '게시판',
      club: '동아리',
      about: '소개'
    },
    en: {
      page: 'Page',
      event: 'Event',
      news: 'News',
      board: 'Board',
      club: 'Club',
      about: 'About'
    }
  };

  return categoryNames[currentLang][category as keyof typeof categoryNames.ko] || category;
};
---

<BaseLayout
  title={query ? `${currentLang === 'ko' ? '검색 결과' : 'Search Results'}: ${query}` : (currentLang === 'ko' ? '검색' : 'Search')}
  description={currentLang === 'ko' ? 'KSA 웹사이트 검색' : 'Search KSA website'}
  lang={currentLang}
>
  <div class="min-h-screen bg-gray-50 py-24 px-4">
    <div class="max-w-4xl mx-auto">
      <!-- Search Header -->
      <div class="text-center mb-12">
        <div class="mb-6">
          <svg class="w-16 h-16 mx-auto text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          {currentLang === 'ko' ? 'KSA 검색' : 'Search KSA'}
        </h1>
        <p class="text-lg text-gray-600">
          {currentLang === 'ko'
            ? '페이지, 행사, 소식 등을 검색해보세요'
            : 'Search for pages, events, news and more'
          }
        </p>
      </div>

      <!-- Search Form -->
      <div class="mb-12">
        <form method="GET" class="relative max-w-2xl mx-auto">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              name="q"
              value={query}
              placeholder={currentLang === 'ko' ? '검색어를 입력하세요...' : 'Enter your search term...'}
              class="block w-full pl-10 pr-12 py-4 border-2 border-gray-200 rounded-xl bg-white text-lg placeholder-gray-400 focus:border-teal-500 focus:outline-none focus:ring-0 transition-colors"
              autofocus
            />
            <button
              type="submit"
              class="absolute inset-y-0 right-0 pr-3 flex items-center"
            >
              <span class="bg-teal-600 hover:bg-teal-700 text-white rounded-lg px-4 py-2 text-sm font-medium transition-colors">
                {currentLang === 'ko' ? '검색' : 'Search'}
              </span>
            </button>
          </div>
        </form>
      </div>

      <!-- Search Results or Initial State -->
      {query ? (
        <div>
          <!-- Results Header -->
          <div class="mb-8">
            <h2 class="text-2xl font-semibold text-gray-900 mb-2">
              {currentLang === 'ko'
                ? `"${query}"에 대한 검색 결과`
                : `Search results for "${query}"`
              }
            </h2>
            <p class="text-gray-600">
              {searchResults.length === 0
                ? (currentLang === 'ko' ? '검색 결과가 없습니다' : 'No results found')
                : (currentLang === 'ko'
                    ? `총 ${searchResults.length}개의 결과를 찾았습니다`
                    : `Found ${searchResults.length} result${searchResults.length === 1 ? '' : 's'}`
                  )
              }
            </p>
          </div>

          <!-- Search Results -->
          {searchResults.length > 0 ? (
            <div class="space-y-6">
              {searchResults.map((result) => {
                const title = currentLang === 'ko' ? result.title : result.titleEn;
                const description = currentLang === 'ko' ? result.description : result.descriptionEn;
                const url = currentLang === 'ko' ? result.url : result.urlEn;
                const isExternal = url.startsWith('http');

                return (
                  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div class="flex items-start gap-4">
                      <div class="flex-shrink-0 mt-1">
                        <span class="text-2xl">{getCategoryIcon(result.category)}</span>
                      </div>
                      <div class="flex-1">
                        <div class="flex items-center gap-2 mb-2">
                          <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">
                            {getCategoryName(result.category)}
                          </span>
                          {isExternal && (
                            <span class="inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-600 rounded-full">
                              External
                            </span>
                          )}
                        </div>
                        <h3 class="text-xl font-semibold text-gray-900 mb-2">
                          <a
                            href={url}
                            class="hover:text-teal-600 transition-colors"
                            {...(isExternal ? { target: '_blank', rel: 'noopener noreferrer' } : {})}
                            set:html={highlightText(title, query)}
                          />
                        </h3>
                        <p
                          class="text-gray-600 leading-relaxed mb-3"
                          set:html={highlightText(description, query)}
                        />
                        <div class="flex items-center justify-between">
                          <p class="text-sm text-gray-500">
                            {url.replace(/^https?:\/\//, '').replace(/\/$/, '')}
                          </p>
                          {isExternal && (
                            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <!-- No Results -->
            <div class="text-center py-12">
              <div class="mb-6">
                <svg class="w-24 h-24 mx-auto text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h3 class="text-xl font-semibold text-gray-900 mb-2">
                {currentLang === 'ko' ? '검색 결과가 없습니다' : 'No results found'}
              </h3>
              <p class="text-gray-600 mb-6">
                {currentLang === 'ko'
                  ? '다른 키워드로 검색해 보거나 아래 인기 페이지를 확인해보세요'
                  : 'Try searching with different keywords or check out popular pages below'
                }
              </p>
            </div>
          )}
        </div>
      ) : (
        <!-- Initial State / Popular Pages -->
        <div>
          <h2 class="text-2xl font-semibold text-gray-900 mb-6">
            {currentLang === 'ko' ? '인기 페이지' : 'Popular Pages'}
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {searchIndex.slice(0, 9).map((item) => {
              const title = currentLang === 'ko' ? item.title : item.titleEn;
              const description = currentLang === 'ko' ? item.description : item.descriptionEn;
              const url = currentLang === 'ko' ? item.url : item.urlEn;
              const isExternal = url.startsWith('http');

              return (
                <a
                  href={url}
                  class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md hover:border-teal-200 transition-all"
                  {...(isExternal ? { target: '_blank', rel: 'noopener noreferrer' } : {})}
                >
                  <div class="flex items-start gap-3">
                    <span class="text-2xl flex-shrink-0">{getCategoryIcon(item.category)}</span>
                    <div class="flex-1">
                      <h3 class="font-semibold text-gray-900 mb-2">{title}</h3>
                      <p class="text-sm text-gray-600 leading-relaxed">{description}</p>
                      <div class="mt-3 flex items-center justify-between">
                        <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">
                          {getCategoryName(item.category)}
                        </span>
                        {isExternal && (
                          <svg class="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                        )}
                      </div>
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </div>
      )}

      <!-- Search Tips -->
      <div class="mt-16 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">
          {currentLang === 'ko' ? '검색 팁' : 'Search Tips'}
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
          <div>
            <h4 class="font-medium text-gray-900 mb-2">
              {currentLang === 'ko' ? '키보드 단축키:' : 'Keyboard shortcuts:'}
            </h4>
            <ul class="space-y-1">
              <li>• <kbd class="px-2 py-1 bg-gray-100 rounded text-xs">Ctrl+K</kbd> {currentLang === 'ko' ? '검색 열기' : 'Open search'}</li>
              <li>• <kbd class="px-2 py-1 bg-gray-100 rounded text-xs">↑↓</kbd> {currentLang === 'ko' ? '결과 탐색' : 'Navigate results'}</li>
              <li>• <kbd class="px-2 py-1 bg-gray-100 rounded text-xs">Enter</kbd> {currentLang === 'ko' ? '선택' : 'Select'}</li>
            </ul>
          </div>
          <div>
            <h4 class="font-medium text-gray-900 mb-2">
              {currentLang === 'ko' ? '검색 가능한 내용:' : 'Searchable content:'}
            </h4>
            <ul class="space-y-1">
              <li>• {currentLang === 'ko' ? '페이지 제목 및 내용' : 'Page titles and content'}</li>
              <li>• {currentLang === 'ko' ? '행사 및 소식' : 'Events and news'}</li>
              <li>• {currentLang === 'ko' ? '동아리 정보' : 'Club information'}</li>
              <li>• {currentLang === 'ko' ? '게시판 내용' : 'Board content'}</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Search tracking script -->
  <script>
    // Track search queries
    const urlParams = new URLSearchParams(window.location.search);
    const query = urlParams.get('q');
    if (query && typeof window.gaTrack !== 'undefined') {
      window.gaTrack('search_query', {
        event_category: 'Search',
        event_label: query,
        search_term: query
      });
    }
  </script>
</BaseLayout>